;;; -*-MODE:LISP; BASE:8;-*-

;	** (c) Copyright 1980 Massachusetts Institute of Technology **
;;; This file contains all the definitions for the machine instruction set
;;; and some other stuff needed by the compiler.


;;; This section contains various information regarding the misc. instructions
;;; on the Lisp Machine.  Every entry is of the form:
;;; (DEFMIC <name> <opcode> <arglist> <lisp-function-p> <no-QINTCMP>)
;;;   <name> is the name of the instruction.  If the Lisp function name
;;; 		is different from the instruction name, this is a cons
;;;		of the function name and the instruction name (e.g. (CAR . M-CAR))
;;;   <opcode> is the number which appears in the macro-instruction.
;;;   <arglist> is a list resembling a lambda-list for the Lisp function
;;;             corresponding to the instruction.  & keywords not allowed.
;;;   <lisp-function-p> should be either T or NIL.  If T, then there
;;;             will be a Lisp function defined in the initial Lisp
;;;             environment (available in the interpreter) corresponding
;;;             to the instruction.
;;;   <no-QINTCMP> is OPTIONAL.  If it is not present it is taken to be NIL.
;;;             If it is non-NIL, then no QINTCMP property will be created
;;;             for the symbol.  Otherwise the QINTCMP property is created from
;;;             the length of <arglist>.  The QINTCMP property permits the
;;;		compiler to compile calls to this function as a misc instruction.

;240 241 FREE
(DEFMIC (CAR . M-CAR) 242 (X) CL:T CL:T)
(DEFMIC (CDR . M-CDR) 243 (X) CL:T CL:T)
(DEFMIC (CAAR . M-CAAR) 244 (X) CL:T CL:T)
(DEFMIC (CADR . M-CADR) 245 (X) CL:T CL:T)
(DEFMIC (CDAR . M-CDAR) 246 (X) CL:T CL:T)
(DEFMIC (CDDR . M-CDDR) 247 (X) CL:T CL:T)
(DEFMIC CAAAR 250 (X) CL:T)
(DEFMIC CAADR 251 (X) CL:T)
(DEFMIC CADAR 252 (X) CL:T)
(DEFMIC CADDR 253 (X) CL:T)
(DEFMIC CDAAR 254 (X) CL:T)
(DEFMIC CDADR 255 (X) CL:T)
(DEFMIC CDDAR 256 (X) CL:T)
(DEFMIC CDDDR 257 (X) CL:T)
(DEFMIC CAAAAR 260 (X) CL:T)
(DEFMIC CAAADR 261 (X) CL:T)
(DEFMIC CAADAR 262 (X) CL:T)
(DEFMIC CAADDR 263 (X) CL:T)
(DEFMIC CADAAR 264 (X) CL:T)
(DEFMIC CADADR 265 (X) CL:T)
(DEFMIC CADDAR 266 (X) CL:T)
(DEFMIC CADDDR 267 (X) CL:T)
(DEFMIC CDAAAR 270 (X) CL:T)
(DEFMIC CDAADR 271 (X) CL:T)
(DEFMIC CDADAR 272 (X) CL:T)
(DEFMIC CDADDR 273 (X) CL:T)
(DEFMIC CDDAAR 274 (X) CL:T)
(DEFMIC CDDADR 275 (X) CL:T)
(DEFMIC CDDDAR 276 (X) CL:T)
(DEFMIC CDDDDR 277 (X) CL:T)

(DEFMIC %LOAD-FROM-HIGHER-CONTEXT 300 (ENVPTR) CL:T)
(DEFMIC %LOCATE-IN-HIGHER-CONTEXT 301 (ENVPTR) CL:T)
(DEFMIC %STORE-IN-HIGHER-CONTEXT 302 (VALUE ENVPTR) CL:T)
(DEFMIC %DATA-TYPE 303 (X) CL:T)
(DEFMIC %POINTER 304 (X) CL:T)
;305-307 FREE
(DEFMIC %MAKE-POINTER 310 (DTP ADDRESS) CL:T)
(DEFMIC %SPREAD 311 (LIST) CL:NIL CL:T)
(DEFMIC %P-STORE-CONTENTS 312 (POINTER X) CL:T)
(DEFMIC %LOGLDB 313 (PPSS WORD) CL:T)    ;THESE DONT COMPLAIN ABOUT LOADING/CLOBBERING SIGN
(DEFMIC %LOGDPB 314 (VALUE PPSS WORD) CL:T)  ;RESULT IS ALWAYS A FIXNUM
(DEFMIC LDB 315 (PPSS WORD) CL:T)
(DEFMIC DPB 316 (VALUE PPSS WORD) CL:T)
(DEFMIC %P-STORE-TAG-AND-POINTER 317 (POINTER MISC-FIELDS POINTER-FIELD) CL:T)

(DEFMIC GET 320 (SYMBOL INDICATOR) CL:T)
(DEFMIC GETL 321 (SYMBOL INDICATOR-LIST) CL:T)
(DEFMIC ASSQ 322 (X ALIST) CL:T)
(DEFMIC LAST 323 (LIST) CL:T)
(DEFMIC LENGTH 324 (LIST) CL:T)
(DEFMIC 1+ 325 (N) CL:T)
(DEFMIC 1- 326 (N) CL:T)
(DEFMIC RPLACA 327 (CONS X) CL:T)
(DEFMIC RPLACD 330 (CONS X) CL:T)
(DEFMIC ZEROP 331 (NUMBER) CL:T)
(DEFMIC SET 332 (SYMBOL X) CL:T)
(DEFMIC FIXP 333 (X) CL:T)
(DEFMIC FLOATP 334 (X) CL:T)
(DEFMIC EQUAL 335 (X Y) CL:T)
;(DEFMIC STORE 336 )
(DEFMIC XSTORE 337 (NEWDATA ARRAYREF) CL:T)

(DEFMIC FALSE 340 () CL:T)
(DEFMIC TRUE 341 () CL:T)
(DEFMIC NOT 342 (X) CL:T)
(DEFMIC (NULL . NOT) 342 (X) CL:T)
(DEFMIC ATOM 343 (X) CL:T)
(DEFMIC ODDP 344 (NUMBER) CL:T)
(DEFMIC EVENP 345 (NUMBER) CL:T)
(DEFMIC %HALT 346 () CL:T)
(DEFMIC GET-PNAME 347 (SYMBOL) CL:T)
(DEFMIC LSH 350 (N NBITS) CL:T)
(DEFMIC ROT 351 (N NBITS) CL:T)
(DEFMIC *BOOLE 352 (FN ARG1 ARG2) CL:T)
(DEFMIC NUMBERP 353 (X) CL:T)
(DEFMIC PLUSP 354 (NUMBER) CL:T)
(DEFMIC MINUSP 355 (NUMBER) CL:T)
(DEFMIC |\\| 356 (X Y) CL:T)
(DEFMIC MINUS 357 (NUMBER) CL:T)
(DEFMIC PRINT-NAME-CELL-LOCATION 360 (SYMBOL) CL:T)
(DEFMIC VALUE-CELL-LOCATION 361 (SYMBOL) CL:T)
(DEFMIC FUNCTION-CELL-LOCATION 362 (SYMBOL) CL:T)
(DEFMIC PROPERTY-CELL-LOCATION 363 (SYMBOL) CL:T)
(DEFMIC NCONS 364 (X) CL:T)
(DEFMIC NCONS-IN-AREA 365 (X AREA) CL:T)
(DEFMIC CONS 366 (X Y) CL:T)
(DEFMIC CONS-IN-AREA 367 (X Y AREA) CL:T)
(DEFMIC XCONS 370 (X Y) CL:T)
(DEFMIC XCONS-IN-AREA 371 (X Y AREA) CL:T)
(DEFMIC %SPREAD-N 372 (N) CL:NIL)
(DEFMIC SYMEVAL 373 (SYMBOL) CL:T)
(DEFMIC POP-M-FROM-UNDER-N 374 (NUM-POPS NUM-TO-KEEP) CL:NIL)
(DEFMIC %OLD-MAKE-LIST 375 (AREA LENGTH) CL:T)
(DEFMIC %CALL-MULT-VALUE 376 () CL:NIL CL:T)
(DEFMIC %CALL0-MULT-VALUE 377 () CL:NIL CL:T)
(DEFMIC %RETURN-2 400 () CL:NIL CL:T)
(DEFMIC %RETURN-3 401 () CL:NIL CL:T)
(DEFMIC %RETURN-N 402 () CL:NIL CL:T)
(DEFMIC RETURN-NEXT-VALUE 403 (X) CL:NIL)
(DEFMIC RETURN-LIST 404 (VALUES) CL:NIL CL:T)
(DEFMIC UNBIND-TO-INDEX-UNDER-N 405 (N) CL:NIL)
(DEFMIC BIND 406 (POINTER X) CL:NIL)
(DEFMIC %MAKE-LEXICAL-CLOSURE 407 (LOCALNUM) CL:NIL CL:T)
(DEFMIC MEMQ 410 (X LIST) CL:T)
(DEFMIC (INTERNAL-< . M-<) 411 (NUM1 NUM2) CL:T)
(DEFMIC (INTERNAL-> . M->) 412 (NUM1 NUM2) CL:T)
(DEFMIC (= . M-=) 413 (NUM1 NUM2) CL:T)
(DEFMIC CHAR-EQUAL 414 (CH1 CH2) CL:T)
(DEFMIC %STRING-SEARCH-CHAR 415 (CHAR STRING START END) CL:T)
(DEFMIC %STRING-EQUAL 416 (STRING1 INDEX1 STRING2 INDEX2 COUNT) CL:T)
(DEFMIC NTH 417 (N LIST) CL:T)
(DEFMIC NTHCDR 420 (N LIST) CL:T)
(DEFMIC (*PLUS . M-+) 421 (NUM1 NUM2) CL:T)
(DEFMIC (*DIF . M--) 422 (NUM1 NUM2) CL:T)
(DEFMIC (*TIMES . M-*) 423 (NUM1 NUM2) CL:T)
(DEFMIC (*QUO . M-//) 424 (NUM1 NUM2) CL:T)
(DEFMIC (*LOGAND . M-LOGAND) 425 (NUM1 NUM2) CL:T)
(DEFMIC (*LOGXOR . M-LOGXOR) 426 (NUM1 NUM2) CL:T)
(DEFMIC (*LOGIOR . M-LOGIOR) 427 (NUM1 NUM2) CL:T)
(DEFMIC ARRAY-LEADER 430 (ARRAY INDEX) CL:T)
(DEFMIC STORE-ARRAY-LEADER 431 (X ARRAY INDEX) CL:T)
(DEFMIC GET-LIST-POINTER-INTO-ARRAY 432 (ARRAY) CL:T)
(DEFMIC ARRAY-PUSH 433 (ARRAY X) CL:T)
(DEFMIC APPLY 434 (FN ARGS) CL:T)
(DEFMIC %MAKE-LIST 435 (INITIAL-VALUE AREA LENGTH) CL:T)
(DEFMIC LIST 436 (&REST ELEMENTS) CL:T CL:T)
(DEFMIC LIST* 437 (FIRST &REST ELEMENTS) CL:T CL:T)   ;"(&REST ELEMENTS LAST)"
(DEFMIC LIST-IN-AREA 440 (AREA &REST ELEMENTS) CL:T CL:T)
(DEFMIC LIST*-IN-AREA 441 (AREA FIRST &REST ELEMENTS) CL:T CL:T)   ;"(AREA &REST ELEMENTS LAST)"
;442 FREE
(DEFMIC %P-CDR-CODE 443 (POINTER) CL:T)
(DEFMIC %P-DATA-TYPE 444 (POINTER) CL:T)
(DEFMIC %P-POINTER 445 (POINTER) CL:T)
(DEFMIC %PAGE-TRACE 446 (TABLE) CL:T)
;447 FREE
(DEFMIC %P-STORE-CDR-CODE 450 (POINTER CDR-CODE) CL:T)
(DEFMIC %P-STORE-DATA-TYPE 451 (POINTER DATA-TYPE) CL:T)
(DEFMIC %P-STORE-POINTER 452 (POINTER POINTER) CL:T)
;453-455 FREE
(DEFMIC %CATCH-OPEN 456 () CL:NIL CL:T)
(DEFMIC %CATCH-OPEN-MV 457 () CL:NIL CL:T)
;461, 462 FREE
(DEFMIC %FEXPR-CALL 462 () CL:NIL CL:T)
(DEFMIC %FEXPR-CALL-MV 463 () CL:NIL CL:T)
(DEFMIC %LEXPR-CALL 464 () CL:NIL CL:T)
(DEFMIC %LEXPR-CALL-MV 465 () CL:NIL CL:T)
(DEFMIC *CATCH 466 (TAG &REST FORMS) CL:T CL:T)
(DEFMIC %BLT 467 (FROM-ADDRESS TO-ADDRESS COUNT INCREMENT) CL:T)
(DEFMIC *THROW 470 (TAG VALUE) CL:T)
(DEFMIC %XBUS-WRITE-SYNC 471 (IO-ADDR WORD DELAY SYNC-LOC SYNC-MASK SYNC-VAL) CL:T)
(DEFMIC %P-LDB 472 (PPSS POINTER) CL:T)
(DEFMIC %P-DPB 473 (VALUE PPSS POINTER) CL:T)
(DEFMIC MASK-FIELD 474 (PPSS FIXNUM) CL:T)
(DEFMIC %P-MASK-FIELD 475  (PPSS POINTER) CL:T)
(DEFMIC DEPOSIT-FIELD 476 (VALUE PPSS FIXNUM) CL:T)
(DEFMIC %P-DEPOSIT-FIELD 477 (VALUE PPSS POINTER) CL:T)
(DEFMIC COPY-ARRAY-CONTENTS 500 (FROM TO) CL:T)
(DEFMIC COPY-ARRAY-CONTENTS-AND-LEADER 501 (FROM TO) CL:T)
(DEFMIC %FUNCTION-INSIDE-SELF 502 () CL:T)
(DEFMIC ARRAY-HAS-LEADER-P 503 (ARRAY) CL:T)
(DEFMIC COPY-ARRAY-PORTION 504 (FROM-ARRAY FROM-START FROM-END TO-ARRAY TO-START TO-END) CL:T)
(DEFMIC FIND-POSITION-IN-LIST 505 (X LIST) CL:T)
;(DEFMIC FIND-POSITION-IN-LIST-EQUAL 506 )
(DEFMIC G-L-P 507 (ARRAY) CL:T)
(DEFMIC FIND-POSITION-IN-VECTOR 510 (X LIST) CL:NIL)
;(DEFMIC FIND-POSITION-IN-VECTOR-EQUAL 511 )
(DEFMIC AR-1 512 (ARRAY SUB) CL:T)
(DEFMIC AR-2 513 (ARRAY SUB1 SUB2) CL:T)
(DEFMIC AR-3 514 (ARRAY SUB1 SUB2 SUB3) CL:T)
(DEFMIC AS-1 515 (VALUE ARRAY SUB) CL:T)
(DEFMIC AS-2 516 (VALUE ARRAY SUB1 SUB2) CL:T)
(DEFMIC AS-3 517 (VALUE ARRAY SUB1 SUB2 SUB3) CL:T)
(DEFMIC %INSTANCE-REF 520 (INSTANCE INDEX) CL:T)
(DEFMIC %INSTANCE-LOC 521 (INSTANCE INDEX) CL:T)
(DEFMIC %INSTANCE-SET 522 (VAL INSTANCE INDEX) CL:T)
(DEFMIC %BINDING-INSTANCES 523 (LIST-OF-SYMBOLS) CL:T)
(DEFMIC %INTERNAL-VALUE-CELL 524 (SYMBOL) CL:T)
(DEFMIC %USING-BINDING-INSTANCES 525 (BINDING-INSTANCES) CL:T)
(DEFMIC %GC-CONS-WORK 526 (NQS) CL:T)
(DEFMIC %P-CONTENTS-OFFSET 527 (POINTER OFFSET) CL:T)
(DEFMIC %DISK-RESTORE 530 (PARTITION-HIGH-16-BITS LOW-16-BITS) CL:T)
(DEFMIC %DISK-SAVE 531 (MAIN-MEMORY-SIZE PARTITION-HIGH-16-BITS LOW-16-BITS) CL:T)
(DEFMIC %ARGS-INFO 532 (FUNCTION) CL:T)
(DEFMIC %OPEN-CALL-BLOCK 533 (FUNCTION ADI-PAIRS DESTINATION) CL:NIL)
(DEFMIC %PUSH 534 (X) CL:NIL)
(DEFMIC %ACTIVATE-OPEN-CALL-BLOCK 535 () CL:NIL)
(DEFMIC %ASSURE-PDL-ROOM 536 (ROOM) CL:NIL)
(DEFMIC STACK-GROUP-RETURN 537 (X) CL:T)
;(DEFMIC %STACK-GROUP-RETURN-MULTI 540 )
;Perhaps the next one should be flushed.
(DEFMIC %MAKE-STACK-LIST 541 (N) CL:NIL)
(DEFMIC STACK-GROUP-RESUME 542 (SG X) CL:T)
(DEFMIC %CALL-MULT-VALUE-LIST 543 () CL:NIL CL:T)
(DEFMIC %CALL0-MULT-VALUE-LIST 544 () CL:NIL CL:T)
(DEFMIC %GC-SCAV-RESET 545 (REGION) CL:T)
(DEFMIC %P-STORE-CONTENTS-OFFSET 546 (X POINTER OFFSET) CL:T)
(DEFMIC %GC-FREE-REGION 547 (REGION) CL:T)
(DEFMIC %GC-FLIP 550 (REGION) CL:T)
(DEFMIC ARRAY-LENGTH 551 (ARRAY) CL:T)
(DEFMIC ARRAY-ACTIVE-LENGTH 552 (ARRAY) CL:T)
(DEFMIC %COMPUTE-PAGE-HASH 553 (ADDR) CL:T)
(DEFMIC GET-LOCATIVE-POINTER-INTO-ARRAY 554 (ARRAY-REF) CL:T)
(DEFMIC %UNIBUS-READ 555 (UNIBUS-ADDR) CL:T)
(DEFMIC %UNIBUS-WRITE 556 (UNIBUS-ADDR WORD) CL:T)
(DEFMIC %GC-SCAVENGE 557 (WORK-UNITS) CL:T)
(DEFMIC %CHAOS-WAKEUP 560 () CL:T)
(DEFMIC %AREA-NUMBER 561 (X) CL:T)
(DEFMIC *MAX 562 (NUM1 NUM2) CL:T)
(DEFMIC *MIN 563 (NUM1 NUM2) CL:T)
(DEFMIC CLOSURE 565 (SYMBOL-LIST FUNCTION) CL:T)
;(DEFMIC DOWNWARD-CLOSURE 566 (SYMBOL-LIST FUNCTION) CL:T)
(DEFMIC LISTP 567 (X) CL:T)
(DEFMIC NLISTP 570 (X) CL:T)
(DEFMIC SYMBOLP 571 (X) CL:T)
(DEFMIC NSYMBOLP 572 (X) CL:T)
(DEFMIC ARRAYP 573 (X) CL:T)
(DEFMIC FBOUNDP 574 (SYMBOL) CL:T)
(DEFMIC STRINGP 575 (X) CL:T)
(DEFMIC BOUNDP 576 (SYMBOL) CL:T)
(DEFMIC INTERNAL-\\ 577 (NUM1 NUM2) CL:T)
(DEFMIC FSYMEVAL 600 (SYMBOL) CL:T)
(DEFMIC AP-1 601 (ARRAY SUB) CL:T)
(DEFMIC AP-2 602 (ARRAY SUB1 SUB2) CL:T)
(DEFMIC AP-3 603 (ARRAY SUB1 SUB2 SUB3) CL:T)
(DEFMIC AP-LEADER 604 (ARRAY SUB) CL:T)
(DEFMIC %P-LDB-OFFSET 605 (PPSS POINTER OFFSET) CL:T)
(DEFMIC %P-DPB-OFFSET 606 (VALUE PPSS POINTER OFFSET) CL:T)
(DEFMIC %P-MASK-FIELD-OFFSET 607 (PPSS POINTER OFFSET) CL:T)
(DEFMIC %P-DEPOSIT-FIELD-OFFSET 610 (VALUE PPSS POINTER OFFSET) CL:T)
(DEFMIC %MULTIPLY-FRACTIONS 611 (NUM1 NUM2) CL:T)
(DEFMIC %DIVIDE-DOUBLE 612 (HIGH-DIVIDEND LOW-DIVIDEND DIVISOR) CL:T)
(DEFMIC %REMAINDER-DOUBLE 613 (HIGH-DIVIDEND LOW-DIVIDEND DIVISOR) CL:T)
(DEFMIC HAULONG 614 (NUM) CL:T)
(DEFMIC %ALLOCATE-AND-INITIALIZE 615 (RETURN-DTP HEADER-DTP HEADER WORD2 AREA NQS) CL:T)
(DEFMIC %ALLOCATE-AND-INITIALIZE-ARRAY 616 (HEADER INDEX-LENGTH LEADER-LENGTH AREA NQS) CL:T)
(DEFMIC %MAKE-POINTER-OFFSET 617 (NEW-DTP POINTER OFFSET) CL:T)
(DEFMIC ^ 620 (NUM EXPT) CL:T)
(DEFMIC %CHANGE-PAGE-STATUS 621 (VIRT-ADDR SWAP-STATUS ACCESS-AND-META) CL:T)
(DEFMIC %CREATE-PHYSICAL-PAGE 622 (PHYS-ADDR) CL:T)
(DEFMIC %DELETE-PHYSICAL-PAGE 623 (PHYS-ADDR) CL:T)
(DEFMIC %24-BIT-PLUS 624 (NUM1 NUM2) CL:T)
(DEFMIC %24-BIT-DIFFERENCE 625 (NUM1 NUM2) CL:T)
(DEFMIC %24-BIT-TIMES 626 (NUM1 NUM2) CL:T)
(DEFMIC ABS 627 (NUM) CL:T)
(DEFMIC %POINTER-DIFFERENCE 630 (PTR1 PTR2) CL:T)
(DEFMIC %P-CONTENTS-AS-LOCATIVE 631 (POINTER) CL:T)
(DEFMIC %P-CONTENTS-AS-LOCATIVE-OFFSET 632 (POINTER OFFSET) CL:T)
(DEFMIC (EQ . M-EQ) 633 (X Y) CL:T)
(DEFMIC %STORE-CONDITIONAL 634 (POINTER OLD NEW) CL:T)
(DEFMIC %STACK-FRAME-POINTER 635 () CL:NIL)
(DEFMIC *UNWIND-STACK 636 (TAG VALUE FRAME-COUNT ACTION) CL:T)
(DEFMIC %XBUS-READ 637 (IO-ADDR) CL:T)
(DEFMIC %XBUS-WRITE 640 (IO-ADDR WORD) CL:T)
(DEFMIC PACKAGE-CELL-LOCATION 641 (SYMBOL) CL:T)
(DEFMIC MOVE-PDL-TOP 642 CL:NIL CL:NIL CL:T)
(DEFMIC SHRINK-PDL-SAVE-TOP 643 (VALUE-TO-MOVE N-SLOTS) CL:NIL CL:T)
(DEFMIC SPECIAL-PDL-INDEX 644 CL:NIL CL:NIL CL:T)
(DEFMIC UNBIND-TO-INDEX 645 (SPECIAL-PDL-INDEX) CL:NIL CL:T)
(DEFMIC UNBIND-TO-INDEX-MOVE 646 (SPECIAL-PDL-INDEX VALUE-TO-MOVE) CL:NIL CL:T)
(DEFMIC FIX 647 (NUMBER) CL:T)
(DEFMIC FLOAT 650 (NUMBER) CL:T)
(DEFMIC SMALL-FLOAT 651 (NUMBER) CL:T)
(DEFMIC %FLOAT-DOUBLE 652 (NUMBER NUMBER) CL:T)
(DEFMIC BIGNUM-TO-ARRAY 653 (BIGNUM BASE) CL:T)
(DEFMIC ARRAY-TO-BIGNUM 654 (ARRAY BASE SIGN) CL:T)
(DEFMIC %UNWIND-PROTECT-CONTINUE 655 (VALUE TAG COUNT ACTION) CL:NIL CL:T)
(DEFMIC %WRITE-INTERNAL-PROCESSOR-MEMORIES 656 (CODE ADR D-HI D-LOW) CL:T)
(DEFMIC %PAGE-STATUS 657 (PTR) CL:T)
(DEFMIC %REGION-NUMBER 660 (PTR) CL:T)
(DEFMIC %FIND-STRUCTURE-HEADER 661 (PTR) CL:T)
(DEFMIC %STRUCTURE-BOXED-SIZE 662 (PTR) CL:T)
(DEFMIC %STRUCTURE-TOTAL-SIZE 663 (PTR) CL:T)
(DEFMIC %MAKE-REGION 664 (BITS SIZE) CL:T)
(DEFMIC BITBLT 665 (ALU WIDTH HEIGHT FROM-ARRAY FROM-X FROM-Y TO-ARRAY TO-X TO-Y) CL:T)
(DEFMIC %DISK-OP 666 (RQB) CL:T)
(DEFMIC %PHYSICAL-ADDRESS 667 (PTR) CL:T)
(DEFMIC POP-OPEN-CALL 670 CL:NIL CL:NIL CL:T)
(DEFMIC %BEEP 671 (HALF-WAVELENGTH DURATION) CL:T)
(DEFMIC %FIND-STRUCTURE-LEADER 672 (PTR) CL:T)
(DEFMIC BPT 673 CL:NIL CL:T)
(DEFMIC %FINDCORE 674 () CL:T)
(DEFMIC %PAGE-IN 675 (PFN VPN) CL:T)
(DEFMIC ASH 676 (N NBITS) CL:T)
(DEFMIC %MAKE-EXPLICIT-STACK-LIST 677 (LENGTH) CL:T)
(DEFMIC %DRAW-CHAR 700 (FONT-ARRAY CHAR-CODE X-BITPOS Y-BITPOS ALU-FUNCTION SHEET) CL:T)
(DEFMIC %DRAW-RECTANGLE 701 (WIDTH HEIGHT X-BITPOS Y-BITPOS ALU-FUNCTION SHEET) CL:T)
(DEFMIC %DRAW-LINE 702 (X0 Y0 X Y ALU DRAW-END-POINT SHEET) CL:T)
(DEFMIC %DRAW-TRIANGLE 703 (X1 Y1 X2 Y2 X3 Y3 ALU SHEET) CL:T)
(DEFMIC %COLOR-TRANSFORM 704 (N17 N16 N15 N14 N13 N12 N11 N10 N7 N6 N5 N4 N3 N2 N1 N0
			      WIDTH HEIGHT ARRAY START-X START-Y) CL:T)
(DEFMIC %RECORD-EVENT 705 (DATA-4 DATA-3 DATA-2 DATA-1 STACK-LEVEL EVENT MUST-BE-4) CL:T)
(DEFMIC %AOS-TRIANGLE 706 (X1 Y1 X2 Y2 X3 Y3 INCREMENT SHEET) CL:T)
(DEFMIC %SET-MOUSE-SCREEN 707 (SHEET) CL:T)
(DEFMIC %OPEN-MOUSE-CURSOR 710 () CL:T)
	

; FROM HERE TO 777 FREE

;;; The ARGDESC properties, telling the compiler special things about
;;; a few functions whose arguments would otherwise be compiled wrong.

;AN ARGDESC PROPERTY IS A LIST OF 2-LISTS.  THE FIRST ELEMENT OF EA
;2-LIST IS A REPEAT COUNT. THE SECOND IS A LIST OF ADL SPECIFIER TYPE TOKENS.

;The following are commented out since we no longer attempt to run the
;compiler in Maclisp and therefore no longer get confused by SUBR/FSUBR/LSUBR properties.
;;MAKE SURE CALLS TO DEFPROP GET COMPILED RIGHT (IE SPREAD ARGS).  OTHERWISE,
;; WOULD LOSE BECAUSE ITS A MACLISP FSUBR.
;
;  (DEFPROP DEFPROP ((3 (FEF-ARG-REQ FEF-QT-QT))) ARGDESC)
;  (DEFPROP FASLOAD ((1 (FEF-ARG-REQ FEF-QT-EVAL)) (1 (FEF-ARG-OPT FEF-QT-EVAL))) ARGDESC)
;	;Likewise FASLOAD which is a SUBR in LISPM since strings self-evaluate.

;These remain here because the compiler loses on QUOTE-HAIR functions.
  (DEFPROP BREAK ((1 (FEF-ARG-OPT FEF-QT-QT))
		  (1 (FEF-ARG-OPT FEF-QT-EVAL))) ARGDESC)

  (DEFPROP SIGNP ((1 (FEF-ARG-REQ FEF-QT-QT)) (1 (FEF-ARG-REQ FEF-QT-EVAL))) ARGDESC)

  (DEFPROP STATUS ((1 (FEF-ARG-REQ FEF-QT-QT))
                   (1 (FEF-ARG-OPT FEF-QT-QT))) ARGDESC)
  (DEFPROP SSTATUS ((2 (FEF-ARG-REQ FEF-QT-QT))) ARGDESC)

;MAKE SURE FUNCTIONAL ARGS TO MAPPING FUNCTIONS GET BROKEN OFF AND COMPILED
; EVEN IF QUOTE USED INSTEAD OF FUNCTION.  (HOWEVER, A POINTER TO THE 
;  BROKEN-OFF SYMBOL INSTEAD OF THE CONTENTS OF ITS FUNCTION CELL WILL BE PASSED
;  IF QUOTE IS USED).

  (DEFPROP MAP    ((1 (FEF-ARG-REQ FEF-QT-EVAL FEF-FUNCTIONAL-ARG))
		   (1 (FEF-ARG-REQ FEF-QT-EVAL))
		   (105 (FEF-ARG-OPT FEF-QT-EVAL)) ) ARGDESC)
  (DEFPROP MAPC   ((1 (FEF-ARG-REQ FEF-QT-EVAL FEF-FUNCTIONAL-ARG))
		   (1 (FEF-ARG-REQ FEF-QT-EVAL))
		   (105 (FEF-ARG-OPT FEF-QT-EVAL)) ) ARGDESC)
  (DEFPROP MAPCAR ((1 (FEF-ARG-REQ FEF-QT-EVAL FEF-FUNCTIONAL-ARG))
		   (1 (FEF-ARG-REQ FEF-QT-EVAL))
		   (105 (FEF-ARG-OPT FEF-QT-EVAL)) ) ARGDESC)
  (DEFPROP MAPLIST ((1 (FEF-ARG-REQ FEF-QT-EVAL FEF-FUNCTIONAL-ARG))
		    (1 (FEF-ARG-REQ FEF-QT-EVAL))
		    (105 (FEF-ARG-OPT FEF-QT-EVAL)) ) ARGDESC)
  (DEFPROP MAPCAN ((1 (FEF-ARG-REQ FEF-QT-EVAL FEF-FUNCTIONAL-ARG))
		   (1 (FEF-ARG-REQ FEF-QT-EVAL))
		   (105 (FEF-ARG-OPT FEF-QT-EVAL)) ) ARGDESC)
  (DEFPROP MAPCON ((1 (FEF-ARG-REQ FEF-QT-EVAL FEF-FUNCTIONAL-ARG))
		   (1 (FEF-ARG-REQ FEF-QT-EVAL))
		   (105 (FEF-ARG-OPT FEF-QT-EVAL)) ) ARGDESC)
  (DEFPROP APPLY ((2 (FEF-ARG-REQ FEF-QT-EVAL))) ARGDESC)
	;Because LSUBR in Maclisp?

;;; Instructions and other symbols for LAP

(DEFPROP CALL 0 QLVAL) 

(DEFPROP CALL0 1000 QLVAL) 

(DEFPROP MOVE 2000 QLVAL) 

(DEFPROP CAR 3000 QLVAL) 

(DEFPROP CDR 4000 QLVAL) 

(DEFPROP CADR 5000 QLVAL) 

(DEFPROP CDDR 6000 QLVAL) 

(DEFPROP CDAR 7000 QLVAL) 

(DEFPROP CAAR 10000 QLVAL) 

;ND1
;(DEFPROP UNUSED 11000 QLVAL) ;NOT USED
(DEFPROP *PLUS 31000 QLVAL)  ;THESE USED TO BE CALLED +, -, ETC. BUT THOSE ARE NOW N-ARG
(DEFPROP *DIF 51000 QLVAL)   ;WHILE THESE SEVEN ARE TWO-ARGUMENTS-ONLY (INSTRUCTIONS).
(DEFPROP *TIMES 71000 QLVAL) 
(DEFPROP *QUO 111000 QLVAL) 
(DEFPROP *LOGAND 131000 QLVAL)
(DEFPROP *LOGXOR 151000 QLVAL)
(DEFPROP *LOGIOR 171000 QLVAL)

;ND2
(DEFPROP = 12000 QLVAL) 
(DEFPROP INTERNAL-> 32000 QLVAL) 
(DEFPROP INTERNAL-< 52000 QLVAL) 
(DEFPROP EQ 72000 QLVAL)
;;; SETE CDR 112000
;;; SETE CDDR 132000
;;; SETE 1+ 152000
;;; SETE 1- 172000

;ND3
;;; 13000 unused, used to be BIND.
(DEFPROP BINDNIL 33000 QLVAL) 
(DEFPROP BINDPOP 53000 QLVAL) 
(DEFPROP SETNIL 73000 QLVAL) 
(DEFPROP SETZERO 113000 QLVAL) 
(DEFPROP PUSH-E 133000 QLVAL)
(DEFPROP MOVEM 153000 QLVAL) 
(DEFPROP POP 173000 QLVAL)

;;; 14 BRANCH
(DEFPROP MISC 15000 QLVAL)

;;; - MISCELLANEOUS FUNCTIONS -
;These two are no longer used
;(DEFPROP LIST 0 QLVAL)
;(DEFPROP LIST-IN-AREA 100 QLVAL)
(DEFPROP UNBIND 200 QLVAL)
 (DEFMIC UNBIND-0 200 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-1 201 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-2 202 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-3 203 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-4 204 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-5 205 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-6 206 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-7 207 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-10 210 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-11 211 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-12 212 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-13 213 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-14 214 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-15 215 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-16 216 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC UNBIND-17 217 CL:NIL CL:NIL CL:T)	;FOR UCONS
(DEFPROP POPPDL 220 QLVAL)
 (DEFMIC POPPDL-0 220 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-1 221 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-2 222 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-3 223 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-4 224 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-5 225 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-6 226 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-7 227 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-10 230 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-11 231 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-12 232 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-13 233 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-14 234 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-15 235 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-16 236 CL:NIL CL:NIL CL:T)	;FOR UCONS
 (DEFMIC POPPDL-17 237 CL:NIL CL:NIL CL:T)	;FOR UCONS
;The rest of these come from the DEFMIC table above.

;"BASE REGISTERS"
(DEFPROP FEF 0 QLVAL) 

(DEFPROP CONST-PAGE 400 QLVAL) 

(DEFPROP LOCBLOCK 500 QLVAL) 

(DEFPROP ARG 600 QLVAL) 

(DEFPROP LPDL 700 QLVAL) 

;DESTINATIONS
(DEFPROP D-IGNORE 0 QLVAL) 

(DEFPROP D-INDS 0 QLVAL) 

(DEFPROP D-PDL 20000 QLVAL) 

(DEFPROP D-NEXT 40000 QLVAL) 

(DEFPROP D-LAST  60000 QLVAL) 

(DEFPROP D-RETURN 100000 QLVAL) 

;(DEFPROP DEST-ARG-QTD 60000 QLVAL) 		;ADDED TO D-NEXT,D-LAST

(DEFPROP D-NEXT-LIST 160000 QLVAL) 

;;; Properties for the micro-compiler

(DEFPROP M-CAR QMA LAST-ARG-IN-T-ENTRY)
(DEFPROP M-CDR QMD LAST-ARG-IN-T-ENTRY)
(DEFPROP M-CAAR QMAA LAST-ARG-IN-T-ENTRY)
(DEFPROP M-CADR QMAD LAST-ARG-IN-T-ENTRY)
(DEFPROP M-CDAR QMDA LAST-ARG-IN-T-ENTRY)
(DEFPROP M-CDDR QMDD LAST-ARG-IN-T-ENTRY)
(DEFPROP CAAAR QMAAA LAST-ARG-IN-T-ENTRY)
(DEFPROP CAADR QMAAD LAST-ARG-IN-T-ENTRY)
(DEFPROP CADAR QMADA LAST-ARG-IN-T-ENTRY)
(DEFPROP CADDR QMADD LAST-ARG-IN-T-ENTRY)
(DEFPROP CDAAR QMDAA LAST-ARG-IN-T-ENTRY)
(DEFPROP CDADR QMDAD LAST-ARG-IN-T-ENTRY)
(DEFPROP CDDAR QMDDA LAST-ARG-IN-T-ENTRY)
(DEFPROP CDDDR QMDDD LAST-ARG-IN-T-ENTRY)
(DEFPROP CAAAAR QMAAAA LAST-ARG-IN-T-ENTRY)
(DEFPROP CAAADR QMAAAD LAST-ARG-IN-T-ENTRY)
(DEFPROP CAADAR QMAADA LAST-ARG-IN-T-ENTRY)
(DEFPROP CAADDR QMAADD LAST-ARG-IN-T-ENTRY)
(DEFPROP CADAAR QMADAA LAST-ARG-IN-T-ENTRY)
(DEFPROP CADADR QMADAD LAST-ARG-IN-T-ENTRY)
(DEFPROP CADDAR QMADDA LAST-ARG-IN-T-ENTRY)
(DEFPROP CADDDR QMADDD LAST-ARG-IN-T-ENTRY)
(DEFPROP CDAAAR QMDAAA LAST-ARG-IN-T-ENTRY)
(DEFPROP CDAADR QMDAAD LAST-ARG-IN-T-ENTRY)
(DEFPROP CDADAR QMDADA LAST-ARG-IN-T-ENTRY)
(DEFPROP CDADDR QMDADD LAST-ARG-IN-T-ENTRY)
(DEFPROP CDDAAR QMDDAA LAST-ARG-IN-T-ENTRY)
(DEFPROP CDDADR QMDDAD LAST-ARG-IN-T-ENTRY)
(DEFPROP CDDDAR QMDDDA LAST-ARG-IN-T-ENTRY)
(DEFPROP CDDDDR QMDDDD LAST-ARG-IN-T-ENTRY)

(DEFPROP M-+ XTCADD LAST-ARG-IN-T-ENTRY)	;CHECKS INPUT D.T. TO ASSURE FIXED
(DEFPROP M-- XTCSUB LAST-ARG-IN-T-ENTRY)
(DEFPROP M-* XTCMUL LAST-ARG-IN-T-ENTRY)
(DEFPROP M-// XTCDIV LAST-ARG-IN-T-ENTRY)
(DEFPROP M-LOGAND XTCAND LAST-ARG-IN-T-ENTRY)
(DEFPROP M-LOGXOR XTCXOR LAST-ARG-IN-T-ENTRY)
(DEFPROP M-LOGIOR XTCIOR LAST-ARG-IN-T-ENTRY)

;(DEFPROP XTCADD XTADD NO-TYPE-CHECKING-ENTRY)	;ONE ARG IN T, ONE ON PDL
;(DEFPROP XTCSUB XTSUB NO-TYPE-CHECKING-ENTRY)
;(DEFPROP XTCMUL XTMUL NO-TYPE-CHECKING-ENTRY)
;(DEFPROP XTCDIV XTDIV NO-TYPE-CHECKING-ENTRY)
;(DEFPROP XTCAND XTAND NO-TYPE-CHECKING-ENTRY)
;(DEFPROP XTCXOR XTXOR NO-TYPE-CHECKING-ENTRY)
;(DEFPROP XTCIOR XTIOR NO-TYPE-CHECKING-ENTRY)

;(DEFPROP M-+ XTADD UNBOXED-NUM-IN-T-ENTRY)	;THESE GUYS DONT REALLY CHECK ANYWAY
;(DEFPROP M-- XTSUB UNBOXED-NUM-IN-T-ENTRY)
;(DEFPROP M-* XTMUL UNBOXED-NUM-IN-T-ENTRY)
;(DEFPROP M-// XTDIV UNBOXED-NUM-IN-T-ENTRY)
;(DEFPROP M-LOGAND XTAND UNBOXED-NUM-IN-T-ENTRY)
;(DEFPROP M-LOGXOR XTXOR UNBOXED-NUM-IN-T-ENTRY)
;(DEFPROP M-LOGIOR XTIOR UNBOXED-NUM-IN-T-ENTRY)

;(DEFPROP M-+ XMADD NO-TYPE-CHECKING-ENTRY)	;THESE ARE A BIT FASTER
;(DEFPROP M-- XMSUB NO-TYPE-CHECKING-ENTRY)	;TAKE 2 ARGS ON PDL
;(DEFPROP M-* XMMUL NO-TYPE-CHECKING-ENTRY)
;(DEFPROP M-// XMDIV NO-TYPE-CHECKING-ENTRY)
;(DEFPROP M-LOGAND XMAND NO-TYPE-CHECKING-ENTRY)
;(DEFPROP M-LOGXOR XMXOR NO-TYPE-CHECKING-ENTRY)
;(DEFPROP M-LOGIOR XMIOR NO-TYPE-CHECKING-ENTRY)

;(DEFPROP ATOM XTATOM LAST-ARG-IN-T-ENTRY)
;(DEFPROP ZEROP XTZERO LAST-ARG-IN-T-ENTRY)
(DEFPROP NUMBERP XTNUMB LAST-ARG-IN-T-ENTRY)
(DEFPROP FIXP XTFIXP LAST-ARG-IN-T-ENTRY)
(DEFPROP FLOATP XTFLTP LAST-ARG-IN-T-ENTRY)
;(DEFPROP PLUSP XTPLUP LAST-ARG-IN-T-ENTRY)
;(DEFPROP MINUSP XTMNSP LAST-ARG-IN-T-ENTRY)
;(DEFPROP MINUS XTMNS LAST-ARG-IN-T-ENTRY)
;(DEFPROP 1+ XT1PLS LAST-ARG-IN-T-ENTRY)
;(DEFPROP 1- XT1MNS LAST-ARG-IN-T-ENTRY)
;(DEFPROP SYMEVAL XTSYME LAST-ARG-IN-T-ENTRY)
(DEFPROP LENGTH XTLENG LAST-ARG-IN-T-ENTRY)

;(DEFPROP ZEROP XBZERO UNBOXED-NUM-IN-T-ENTRY)
;(DEFPROP PLUSP XBPLUP UNBOXED-NUM-IN-T-ENTRY)
;(DEFPROP MINUSP XBMNSP UNBOXED-NUM-IN-T-ENTRY)
;(DEFPROP MINUS XBMNS UNBOXED-NUM-IN-T-ENTRY)
;(DEFPROP 1+ XB1PLS UNBOXED-NUM-IN-T-ENTRY)
;(DEFPROP 1- XB1MNS UNBOXED-NUM-IN-T-ENTRY)

;;; Certain MISC-instructions make assumptions about what destinations
;;; they are used with.  Some require D-IGNORE, because they assume that
;;; there is no return address on the micro-stack.  Some do not allow D-IGNORE,
;;; because they popj and start a memory cycle.  Some are really random.
(CL:DEFVAR MISC-INSTRUCTION-REQUIRED-DESTINATION-ALIST
	'( (%ALLOCATE-AND-INITIALIZE D-PDL D-NEXT D-LAST D-RETURN D-NEXT-LIST)
	   (%ALLOCATE-AND-INITIALIZE-ARRAY D-PDL D-NEXT D-LAST D-RETURN D-NEXT-LIST)
	   (%SPREAD D-NEXT D-LAST)
	   (RETURN-LIST D-RETURN)
	   (%OPEN-CALL-BLOCK D-IGNORE D-INDS)
	   (%ACTIVATE-OPEN-CALL-BLOCK D-IGNORE D-INDS)
	   (%RETURN-2 D-IGNORE D-INDS)
	   (%RETURN-3 D-IGNORE D-INDS)
	   (%RETURN-N D-IGNORE D-INDS)
	   (%RETURN-NEXT-VALUE D-IGNORE D-INDS)))
