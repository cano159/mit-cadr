CADR simulator
10/17/05
Brad Parker
brad@heeltoe.com

What is this?
-------------

This is a program designed to emulate the MIT CADR microprocessor
hardware.  A CADR is a second generation MIT lisp machine.  A good
description can be found in "A.I. Memo 528" from the MIT AI Labs
entitled, "CADR".

The CADR was a 32 bit microcoded microprocessor designed to run the
lisp language.

This program attempts to interpret the microcode found in the machine
starting with the "prom" microcode which runs when the machine is
first powered on.

There is sufficient hardware support for the disk and network to
provide a reasonaly functional lisp machine experience.


What state is this in?
----------------------

It boots a world!
It talks on the network!
It talks to a FILE server!

The emulation is reasonably complete (modulo bugs).  It gets through the
prom code, loads the microcode band, copies the band to swap and
executes the load band cleanly.  The system boots and runs.

The console display is drawn into an X window (using SDL) which tracks
the mouse and keyboard.  The simplest way to run it is

	./usim

If you want to see a trace of macrocode function names try:

	./usim -n -Tl >output

If you want to see a voluminous trace of every microcode instruction
try:

	./usim -n -t >output

The disk emulation reads from a 'disk image' file which is constructed
with 'diskmaker'.  The disk image looks like a Trident T-300 disk
to the microcode, complete with a parition table.

The display board and iob are emulated.  An X window displays in
monochrome at 768x1024.  The mouse and keyboard are tracked.  The
keyboard is "mapped" to the old Knight keyboard.

The internal microsecond clock and the 60hz tv interrupt currently try
and use wall clock time for a more realistic simulation.

There is also emulation of the chaosnet board.  Packets are sent via a
unix socket to a "chaosd" daemon which distributes them to various
client programs (see the chaos directory).

There are some hacks for noticing unibus access but no xbus/unibus
mapping support.  The two machine lash-up/debug interface is not (yet)
supported.  I want to add this, however.

I have fixed several ALU bugs and the emulation now seems much more
stable.

There's still a long delay when booting, even though the world is
running and system-x works fine.  I need to track this down - possibly
waiting for a time packet?  The system is available right away,
however, try "F2-p".

What needs to be done?
----------------------

- cleanup keyboard emulation
- cleanup mouse emulation
- speed up the network emulation

The keyboard mapping is a bit of a crock.  The mouse emulation works
but doesn't track exactly.

f1	network
f2	system
f3	abort
f4	clear
f5	help
f6	end
f7	call
delete	rubout

I'd liketo make this programmable with a reasonable default.

Long term I want to do some recompiling of the microcode into C and
assembler, both statically and on-the-fly.  This is the interesting
part...

What programs are here?
-----------------------

usim		- the emulator
diskmaker	- program to make CADR disk images from .mcr files and
		  .lod files
lod		- utiltity to pick apart load bands and show their insides


Standing on the Shoulders of Giants
-----------------------------------

I would like to thanks the following people for helping me on this, er,
project:

Tom Knight
Howard Shrobe
Richard Greenblatt
Danial Weinreb
Al Kossow
George Carrette
Steve Krueger
Alastair Bridgewater
John Wroclawski
Bjorn Victor

Without their support or encouragement I would probably not have done
this.  Certainly if Al had not sent me the prom images I would never
have started.  And without Dan's box-of-tapes I could never have
succeeded.  RG offered some good explainations when I was confused.  TK and
Howie were extremely supportive at the just right moment (and answered
a lot of email).  George offered many good suggestions and answered
lots of questions. Steve helped me locate missing pages from "memo
528".  Alastair did some amazing work on several explorer emulators.
And John's office is where I first saw a 3600 console and said,
"what's that?".
